module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "argument_declaration": parse_argument_declaration,
        "argument_declaration_list": parse_argument_declaration_list,
        "argument_declaration_list_noparens": parse_argument_declaration_list_noparens,
        "body_statement": parse_body_statement,
        "body_statements": parse_body_statements,
        "body_statements_internal": parse_body_statements_internal,
        "character_literal": parse_character_literal,
        "decimal": parse_decimal,
        "expression": parse_expression,
        "function_call": parse_function_call,
        "function_declaration": parse_function_declaration,
        "function_definition": parse_function_definition,
        "identifier": parse_identifier,
        "integer": parse_integer,
        "real": parse_real,
        "sp": parse_sp,
        "storage_class_keyword": parse_storage_class_keyword,
        "storage_classes": parse_storage_classes,
        "strchar": parse_strchar,
        "string_literal": parse_string_literal,
        "symbol": parse_symbol,
        "top_statement": parse_top_statement,
        "top_statements": parse_top_statements,
        "type": parse_type,
        "type_constructor": parse_type_constructor,
        "type_constructor_keyword": parse_type_constructor_keyword,
        "type_modifier": parse_type_modifier,
        "type_modifiers": parse_type_modifiers,
        "type_modifiers_internal": parse_type_modifiers_internal,
        "typename": parse_typename,
        "value_list": parse_value_list,
        "value_list_noparens": parse_value_list_noparens,
        "variable_declaration": parse_variable_declaration,
        "variable_definition": parse_variable_definition,
        "variable_keyword": parse_variable_keyword
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "top_statements";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_top_statements() {
        var cacheKey = 'top_statements@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_top_statement();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result6 = [];
          var result8 = parse_sp();
          while (result8 !== null) {
            result6.push(result8);
            var result8 = parse_sp();
          }
          if (result6 !== null) {
            var result7 = parse_top_statements();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(stmt, opt) {
                 var more = opt[1];
          
                  if (more !== undefined)
                  {
                      more.unshift(stmt);
                      return more;
                  }
          
                  return [stmt];
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("top-level statements");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_top_statement() {
        var cacheKey = 'top_statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos5 = pos;
        var savedPos6 = pos;
        var result17 = parse_variable_declaration();
        if (result17 !== null) {
          if (input.substr(pos, 1) === ";") {
            var result18 = ";";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\";\"");
            }
          }
          if (result18 !== null) {
            var result15 = [result17, result18];
          } else {
            var result15 = null;
            pos = savedPos6;
          }
        } else {
          var result15 = null;
          pos = savedPos6;
        }
        var result16 = result15 !== null
          ? (function(stmt) { return stmt; })(result15[0])
          : null;
        if (result16 !== null) {
          var result14 = result16;
        } else {
          var result14 = null;
          pos = savedPos5;
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos3 = pos;
          var savedPos4 = pos;
          var result12 = parse_variable_definition();
          if (result12 !== null) {
            if (input.substr(pos, 1) === ";") {
              var result13 = ";";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\";\"");
              }
            }
            if (result13 !== null) {
              var result10 = [result12, result13];
            } else {
              var result10 = null;
              pos = savedPos4;
            }
          } else {
            var result10 = null;
            pos = savedPos4;
          }
          var result11 = result10 !== null
            ? (function(stmt) { return stmt; })(result10[0])
            : null;
          if (result11 !== null) {
            var result9 = result11;
          } else {
            var result9 = null;
            pos = savedPos3;
          }
          if (result9 !== null) {
            var result0 = result9;
          } else {
            var savedPos1 = pos;
            var savedPos2 = pos;
            var result7 = parse_function_declaration();
            if (result7 !== null) {
              if (input.substr(pos, 1) === ";") {
                var result8 = ";";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              if (result8 !== null) {
                var result5 = [result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            var result6 = result5 !== null
              ? (function(stmt) { return stmt; })(result5[0])
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              var result2 = parse_function_definition();
              var result3 = result2 !== null
                ? (function(stmt) { return stmt; })(result2)
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_declaration() {
        var cacheKey = 'function_declaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "$fn") {
          var result3 = "$fn";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"$fn\"");
          }
        }
        if (result3 !== null) {
          var result14 = parse_sp();
          if (result14 !== null) {
            var result4 = [];
            while (result14 !== null) {
              result4.push(result14);
              var result14 = parse_sp();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_identifier();
            if (result5 !== null) {
              var result6 = [];
              var result13 = parse_sp();
              while (result13 !== null) {
                result6.push(result13);
                var result13 = parse_sp();
              }
              if (result6 !== null) {
                var result7 = parse_argument_declaration_list();
                if (result7 !== null) {
                  var savedPos2 = pos;
                  var result10 = [];
                  var result12 = parse_sp();
                  while (result12 !== null) {
                    result10.push(result12);
                    var result12 = parse_sp();
                  }
                  if (result10 !== null) {
                    var result11 = parse_type();
                    if (result11 !== null) {
                      var result9 = [result10, result11];
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                  var result8 = result9 !== null ? result9 : '';
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, args, opt) {
                  var retnType = opt[1];
                  var fn = { type: 'function-declaration', name: name, args: args };
          
                  if (retnType !== undefined)
                  {
                      fn.retnType = retnType;
                  }
          
                  return fn;
              })(result1[2], result1[4], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_definition() {
        var cacheKey = 'function_definition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_function_declaration();
        if (result3 !== null) {
          var result4 = [];
          var result6 = parse_sp();
          while (result6 !== null) {
            result4.push(result6);
            var result6 = parse_sp();
          }
          if (result4 !== null) {
            var result5 = parse_body_statements();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fn, body) {
                  fn.type = 'function-definition';
                  fn.body = body;
          
                  return fn;
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_argument_declaration_list() {
        var cacheKey = 'argument_declaration_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        if (input.substr(pos, 1) === "(") {
          var result40 = "(";
          pos += 1;
        } else {
          var result40 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result40 !== null) {
          var result41 = [];
          var result43 = parse_sp();
          while (result43 !== null) {
            result41.push(result43);
            var result43 = parse_sp();
          }
          if (result41 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result42 = ")";
              pos += 1;
            } else {
              var result42 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result42 !== null) {
              var result38 = [result40, result41, result42];
            } else {
              var result38 = null;
              pos = savedPos7;
            }
          } else {
            var result38 = null;
            pos = savedPos7;
          }
        } else {
          var result38 = null;
          pos = savedPos7;
        }
        var result39 = result38 !== null
          ? (function() {
                  return {
                      type: 'argument-declaration-list',
                      args: [], variadic: false
                  };
              })()
          : null;
        if (result39 !== null) {
          var result37 = result39;
        } else {
          var result37 = null;
          pos = savedPos6;
        }
        if (result37 !== null) {
          var result0 = result37;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          if (input.substr(pos, 1) === "(") {
            var result30 = "(";
            pos += 1;
          } else {
            var result30 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result30 !== null) {
            var result31 = [];
            var result36 = parse_sp();
            while (result36 !== null) {
              result31.push(result36);
              var result36 = parse_sp();
            }
            if (result31 !== null) {
              var result32 = parse_argument_declaration_list_noparens();
              if (result32 !== null) {
                var result33 = [];
                var result35 = parse_sp();
                while (result35 !== null) {
                  result33.push(result35);
                  var result35 = parse_sp();
                }
                if (result33 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result34 = ")";
                    pos += 1;
                  } else {
                    var result34 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result34 !== null) {
                    var result28 = [result30, result31, result32, result33, result34];
                  } else {
                    var result28 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result28 = null;
                  pos = savedPos5;
                }
              } else {
                var result28 = null;
                pos = savedPos5;
              }
            } else {
              var result28 = null;
              pos = savedPos5;
            }
          } else {
            var result28 = null;
            pos = savedPos5;
          }
          var result29 = result28 !== null
            ? (function(args) {
                    return {
                        type: 'argument-declaration-list',
                        args: args, variadic: false
                    };
                })(result28[2])
            : null;
          if (result29 !== null) {
            var result27 = result29;
          } else {
            var result27 = null;
            pos = savedPos4;
          }
          if (result27 !== null) {
            var result0 = result27;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === "(") {
              var result20 = "(";
              pos += 1;
            } else {
              var result20 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result20 !== null) {
              var result21 = [];
              var result26 = parse_sp();
              while (result26 !== null) {
                result21.push(result26);
                var result26 = parse_sp();
              }
              if (result21 !== null) {
                if (input.substr(pos, 3) === "...") {
                  var result22 = "...";
                  pos += 3;
                } else {
                  var result22 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"...\"");
                  }
                }
                if (result22 !== null) {
                  var result23 = [];
                  var result25 = parse_sp();
                  while (result25 !== null) {
                    result23.push(result25);
                    var result25 = parse_sp();
                  }
                  if (result23 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result24 = ")";
                      pos += 1;
                    } else {
                      var result24 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result24 !== null) {
                      var result18 = [result20, result21, result22, result23, result24];
                    } else {
                      var result18 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result18 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result18 = null;
                  pos = savedPos3;
                }
              } else {
                var result18 = null;
                pos = savedPos3;
              }
            } else {
              var result18 = null;
              pos = savedPos3;
            }
            var result19 = result18 !== null
              ? (function() {
                      return {
                          type: 'argument-declaration-list',
                          args: [], variadic: true
                      };
                  })()
              : null;
            if (result19 !== null) {
              var result17 = result19;
            } else {
              var result17 = null;
              pos = savedPos2;
            }
            if (result17 !== null) {
              var result0 = result17;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "(") {
                var result4 = "(";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result4 !== null) {
                var result5 = [];
                var result16 = parse_sp();
                while (result16 !== null) {
                  result5.push(result16);
                  var result16 = parse_sp();
                }
                if (result5 !== null) {
                  var result6 = parse_argument_declaration_list_noparens();
                  if (result6 !== null) {
                    var result7 = [];
                    var result15 = parse_sp();
                    while (result15 !== null) {
                      result7.push(result15);
                      var result15 = parse_sp();
                    }
                    if (result7 !== null) {
                      if (input.substr(pos, 1) === ",") {
                        var result8 = ",";
                        pos += 1;
                      } else {
                        var result8 = null;
                        if (reportMatchFailures) {
                          matchFailed("\",\"");
                        }
                      }
                      if (result8 !== null) {
                        var result9 = [];
                        var result14 = parse_sp();
                        while (result14 !== null) {
                          result9.push(result14);
                          var result14 = parse_sp();
                        }
                        if (result9 !== null) {
                          if (input.substr(pos, 3) === "...") {
                            var result10 = "...";
                            pos += 3;
                          } else {
                            var result10 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"...\"");
                            }
                          }
                          if (result10 !== null) {
                            var result11 = [];
                            var result13 = parse_sp();
                            while (result13 !== null) {
                              result11.push(result13);
                              var result13 = parse_sp();
                            }
                            if (result11 !== null) {
                              if (input.substr(pos, 1) === ")") {
                                var result12 = ")";
                                pos += 1;
                              } else {
                                var result12 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result12 !== null) {
                                var result2 = [result4, result5, result6, result7, result8, result9, result10, result11, result12];
                              } else {
                                var result2 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result2 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result2 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(args) {
                        return {
                            type: 'argument-declaration-list',
                            args: args, variadic: true
                        };
                    })(result2[2])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_argument_declaration_list_noparens() {
        var cacheKey = 'argument_declaration_list_noparens@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result13 = parse_variable_declaration();
        if (result13 !== null) {
          var result3 = result13;
        } else {
          var result12 = parse_type();
          if (result12 !== null) {
            var result3 = result12;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var result6 = [];
          var result11 = parse_sp();
          while (result11 !== null) {
            result6.push(result11);
            var result11 = parse_sp();
          }
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result7 !== null) {
              var result8 = [];
              var result10 = parse_sp();
              while (result10 !== null) {
                result8.push(result10);
                var result10 = parse_sp();
              }
              if (result8 !== null) {
                var result9 = parse_argument_declaration_list_noparens();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(arg, opt) {
                  var more = opt[3];
          
                  if (more !== undefined)
                  {
                      more.unshift(arg);
                      return more;
                  }
          
                  return [arg];
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_argument_declaration() {
        var cacheKey = 'argument_declaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result10 = parse_type();
        var result4 = result10 !== null ? result10 : '';
        if (result4 !== null) {
          var savedPos2 = pos;
          var result7 = [];
          var result9 = parse_sp();
          while (result9 !== null) {
            result7.push(result9);
            var result9 = parse_sp();
          }
          if (result7 !== null) {
            var result8 = parse_identifier();
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          var result5 = result6 !== null ? result6 : '';
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result1 = result3 !== null ? result3 : '';
        var result2 = result1 !== null
          ? (function(opt) {
                  var type = opt[0];
                  var name = opt[1][1];
          
                  var arg = { type: 'variable-declaration' };
          
                  if (type !== undefined)
                  {
                      arg.vtype = type;
                  }
          
                  if (name !== undefined)
                  {
                      arg.name = name;
                  }
          
                  return arg;
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_body_statements() {
        var cacheKey = 'body_statements@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "{") {
          var result14 = "{";
          pos += 1;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result14 !== null) {
          var result15 = [];
          var result17 = parse_sp();
          while (result17 !== null) {
            result15.push(result17);
            var result17 = parse_sp();
          }
          if (result15 !== null) {
            if (input.substr(pos, 1) === "}") {
              var result16 = "}";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"}\"");
              }
            }
            if (result16 !== null) {
              var result12 = [result14, result15, result16];
            } else {
              var result12 = null;
              pos = savedPos3;
            }
          } else {
            var result12 = null;
            pos = savedPos3;
          }
        } else {
          var result12 = null;
          pos = savedPos3;
        }
        var result13 = result12 !== null
          ? (function() { return { type: 'body-statements', statements: [] }; })()
          : null;
        if (result13 !== null) {
          var result11 = result13;
        } else {
          var result11 = null;
          pos = savedPos2;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "{") {
            var result4 = "{";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result10 = parse_sp();
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_sp();
            }
            if (result5 !== null) {
              var result6 = parse_body_statements_internal();
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_sp();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_sp();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result8 = "}";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result8 !== null) {
                    var result2 = [result4, result5, result6, result7, result8];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(body) {
                    return { type: 'body-statements', statements: body };
                })(result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_body_statements_internal() {
        var cacheKey = 'body_statements_internal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_body_statement();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result6 = [];
          var result8 = parse_sp();
          while (result8 !== null) {
            result6.push(result8);
            var result8 = parse_sp();
          }
          if (result6 !== null) {
            var result7 = parse_body_statements_internal();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(stmt, opt) {
                  var more = opt[1];
          
                  if (more !== undefined)
                  {
                      more.unshift(stmt);
                      return more;
                  }
          
                  return [stmt];
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_body_statement() {
        var cacheKey = 'body_statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos8 = pos;
        var savedPos9 = pos;
        var result35 = parse_variable_declaration();
        if (result35 !== null) {
          var result36 = [];
          var result38 = parse_sp();
          while (result38 !== null) {
            result36.push(result38);
            var result38 = parse_sp();
          }
          if (result36 !== null) {
            if (input.substr(pos, 1) === ";") {
              var result37 = ";";
              pos += 1;
            } else {
              var result37 = null;
              if (reportMatchFailures) {
                matchFailed("\";\"");
              }
            }
            if (result37 !== null) {
              var result33 = [result35, result36, result37];
            } else {
              var result33 = null;
              pos = savedPos9;
            }
          } else {
            var result33 = null;
            pos = savedPos9;
          }
        } else {
          var result33 = null;
          pos = savedPos9;
        }
        var result34 = result33 !== null
          ? (function(stmt) { return stmt; })(result33[0])
          : null;
        if (result34 !== null) {
          var result32 = result34;
        } else {
          var result32 = null;
          pos = savedPos8;
        }
        if (result32 !== null) {
          var result0 = result32;
        } else {
          var savedPos6 = pos;
          var savedPos7 = pos;
          var result28 = parse_variable_definition();
          if (result28 !== null) {
            var result29 = [];
            var result31 = parse_sp();
            while (result31 !== null) {
              result29.push(result31);
              var result31 = parse_sp();
            }
            if (result29 !== null) {
              if (input.substr(pos, 1) === ";") {
                var result30 = ";";
                pos += 1;
              } else {
                var result30 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              if (result30 !== null) {
                var result26 = [result28, result29, result30];
              } else {
                var result26 = null;
                pos = savedPos7;
              }
            } else {
              var result26 = null;
              pos = savedPos7;
            }
          } else {
            var result26 = null;
            pos = savedPos7;
          }
          var result27 = result26 !== null
            ? (function(stmt) { return stmt; })(result26[0])
            : null;
          if (result27 !== null) {
            var result25 = result27;
          } else {
            var result25 = null;
            pos = savedPos6;
          }
          if (result25 !== null) {
            var result0 = result25;
          } else {
            var savedPos4 = pos;
            var savedPos5 = pos;
            var result21 = parse_expression();
            if (result21 !== null) {
              var result22 = [];
              var result24 = parse_sp();
              while (result24 !== null) {
                result22.push(result24);
                var result24 = parse_sp();
              }
              if (result22 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result23 = ";";
                  pos += 1;
                } else {
                  var result23 = null;
                  if (reportMatchFailures) {
                    matchFailed("\";\"");
                  }
                }
                if (result23 !== null) {
                  var result19 = [result21, result22, result23];
                } else {
                  var result19 = null;
                  pos = savedPos5;
                }
              } else {
                var result19 = null;
                pos = savedPos5;
              }
            } else {
              var result19 = null;
              pos = savedPos5;
            }
            var result20 = result19 !== null
              ? (function(stmt) { return stmt; })(result19[0])
              : null;
            if (result20 !== null) {
              var result18 = result20;
            } else {
              var result18 = null;
              pos = savedPos4;
            }
            if (result18 !== null) {
              var result0 = result18;
            } else {
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 7) === "$return") {
                var result11 = "$return";
                pos += 7;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"$return\"");
                }
              }
              if (result11 !== null) {
                var result12 = [];
                var result17 = parse_sp();
                while (result17 !== null) {
                  result12.push(result17);
                  var result17 = parse_sp();
                }
                if (result12 !== null) {
                  var result13 = parse_expression();
                  if (result13 !== null) {
                    var result14 = [];
                    var result16 = parse_sp();
                    while (result16 !== null) {
                      result14.push(result16);
                      var result16 = parse_sp();
                    }
                    if (result14 !== null) {
                      if (input.substr(pos, 1) === ";") {
                        var result15 = ";";
                        pos += 1;
                      } else {
                        var result15 = null;
                        if (reportMatchFailures) {
                          matchFailed("\";\"");
                        }
                      }
                      if (result15 !== null) {
                        var result9 = [result11, result12, result13, result14, result15];
                      } else {
                        var result9 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos3;
                }
              } else {
                var result9 = null;
                pos = savedPos3;
              }
              var result10 = result9 !== null
                ? (function(value) { return { type: 'return-statement', value: value }; })(result9[2])
                : null;
              if (result10 !== null) {
                var result8 = result10;
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              if (result8 !== null) {
                var result0 = result8;
              } else {
                var savedPos0 = pos;
                var savedPos1 = pos;
                if (input.substr(pos, 7) === "$return") {
                  var result4 = "$return";
                  pos += 7;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"$return\"");
                  }
                }
                if (result4 !== null) {
                  var result5 = [];
                  var result7 = parse_sp();
                  while (result7 !== null) {
                    result5.push(result7);
                    var result7 = parse_sp();
                  }
                  if (result5 !== null) {
                    if (input.substr(pos, 1) === ";") {
                      var result6 = ";";
                      pos += 1;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result6 !== null) {
                      var result2 = [result4, result5, result6];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
                var result3 = result2 !== null
                  ? (function() { return { type: 'return-statement' }; })()
                  : null;
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_declaration() {
        var cacheKey = 'variable_declaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result11 = parse_type();
        if (result11 !== null) {
          var result12 = [];
          var result14 = parse_sp();
          while (result14 !== null) {
            result12.push(result14);
            var result14 = parse_sp();
          }
          if (result12 !== null) {
            var result13 = parse_identifier();
            if (result13 !== null) {
              var result9 = [result11, result12, result13];
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        var result10 = result9 !== null
          ? (function(type, name) {
                  return {
                      type: 'variable-declaration',
                      vtype: type, name: name
                  };
              })(result9[0], result9[2])
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_variable_keyword();
          if (result4 !== null) {
            var result7 = parse_sp();
            if (result7 !== null) {
              var result5 = [];
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_sp();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result6 = parse_identifier();
              if (result6 !== null) {
                var result2 = [result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(name) {
                    return { type: 'variable-declaration', name: name };
                })(result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_definition() {
        var cacheKey = 'variable_definition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_variable_declaration();
        if (result3 !== null) {
          var result4 = [];
          var result9 = parse_sp();
          while (result9 !== null) {
            result4.push(result9);
            var result9 = parse_sp();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "=") {
              var result5 = "=";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_sp();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_sp();
              }
              if (result6 !== null) {
                var result7 = parse_expression();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(variable, init) {
                  variable.type = 'variable-definition';
                  variable.init = init;
          
                  return variable;
              })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("variable definition");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_keyword() {
        var cacheKey = 'variable_keyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "$auto") {
          var result1 = "$auto";
          pos += 5;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"$auto\"");
          }
        }
        var result2 = result1 !== null
          ? (function() { return 'var'; })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type() {
        var cacheKey = 'type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos3 = pos;
        var result13 = parse_storage_classes();
        if (result13 !== null) {
          var result15 = parse_sp();
          if (result15 !== null) {
            var result14 = [];
            while (result15 !== null) {
              result14.push(result15);
              var result15 = parse_sp();
            }
          } else {
            var result14 = null;
          }
          if (result14 !== null) {
            var result12 = [result13, result14];
          } else {
            var result12 = null;
            pos = savedPos3;
          }
        } else {
          var result12 = null;
          pos = savedPos3;
        }
        var result3 = result12 !== null ? result12 : '';
        if (result3 !== null) {
          var result11 = parse_type_constructor();
          if (result11 !== null) {
            var result4 = result11;
          } else {
            var result10 = parse_typename();
            if (result10 !== null) {
              var result4 = result10;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var result7 = [];
            var result9 = parse_sp();
            while (result9 !== null) {
              result7.push(result9);
              var result9 = parse_sp();
            }
            if (result7 !== null) {
              var result8 = parse_type_modifiers();
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(opt1, type, opt2) {
                  var storageList = opt1[0];
          
                  if (storageList === undefined)
                  {
                      storageList = [];
                  }
          
                  var modifiers = opt2[1];
          
                  // no modifiers? just return type
                  if (modifiers === undefined)
                  {
                      return {
                          type: 'type',
          
                          storageList: storageList,
                          spec: type
                      };
                  }
          
                  // append type to end of modifier chain
                  var modifier = modifiers;
          
                  while (modifier.subject !== undefined)
                  {
                      modifier = modifier.subject;
                  }
          
                  modifier.subject = type;
          
                  // type is modifier chain with itself appended
                  type =
                  {
                      type: 'type',
          
                      storageList: storageList,
                      spec: modifiers
                  };
          
                  type.storageList = storageList;
                  return type;
              })(result1[0], result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("type");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_storage_classes() {
        var cacheKey = 'storage_classes@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_storage_class_keyword();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result8 = parse_sp();
          if (result8 !== null) {
            var result6 = [];
            while (result8 !== null) {
              result6.push(result8);
              var result8 = parse_sp();
            }
          } else {
            var result6 = null;
          }
          if (result6 !== null) {
            var result7 = parse_storage_classes();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(cls, opt) {
                  var more = opt[1];
          
                  if (more !== undefined)
                  {
                      more.push(cls);
                      return more;
                  }
          
                  return [cls];
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_storage_class_keyword() {
        var cacheKey = 'storage_class_keyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 8) === "$dynamic") {
          var result0 = "$dynamic";
          pos += 8;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"$dynamic\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type_constructor() {
        var cacheKey = 'type_constructor@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_type_constructor_keyword();
        if (result3 !== null) {
          var result4 = [];
          var result12 = parse_sp();
          while (result12 !== null) {
            result4.push(result12);
            var result12 = parse_sp();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              var result11 = parse_sp();
              while (result11 !== null) {
                result6.push(result11);
                var result11 = parse_sp();
              }
              if (result6 !== null) {
                var result7 = parse_type();
                if (result7 !== null) {
                  var result8 = [];
                  var result10 = parse_sp();
                  while (result10 !== null) {
                    result8.push(result10);
                    var result10 = parse_sp();
                  }
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result9 = ")";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ctor, type) {
                  return { type: ctor, subject: type };
              })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type_constructor_keyword() {
        var cacheKey = 'type_constructor_keyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 6) === "$const") {
          var result2 = "$const";
          pos += 6;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"$const\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 10) === "$immutable") {
            var result1 = "$immutable";
            pos += 10;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"$immutable\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_typename() {
        var cacheKey = 'typename@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_identifier();
        var result2 = result1 !== null
          ? (function(name) { return { type: 'typename', name: name }; })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type_modifiers() {
        var cacheKey = 'type_modifiers@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_type_modifiers_internal();
        var result2 = result1 !== null
          ? (function(internal) { return internal.head; })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("type modifiers");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type_modifiers_internal() {
        var cacheKey = 'type_modifiers_internal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_type_modifier();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result6 = [];
          var result8 = parse_sp();
          while (result8 !== null) {
            result6.push(result8);
            var result8 = parse_sp();
          }
          if (result6 !== null) {
            var result7 = parse_type_modifiers_internal();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(modifier, opt) {
                  var more = opt[1];
          
                  if (more === undefined)
                  {
                      more = { head: modifier };
                  }
                  else
                  {
                      more.current.subject = modifier;
                  }
          
                  return { head: more.head, current: modifier };
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type_modifier() {
        var cacheKey = 'type_modifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "*") {
          var result15 = "*";
          pos += 1;
        } else {
          var result15 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        var result16 = result15 !== null
          ? (function() { return { type: 'ptr' }; })()
          : null;
        if (result16 !== null) {
          var result14 = result16;
        } else {
          var result14 = null;
          pos = savedPos3;
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 2) === "[]") {
            var result12 = "[]";
            pos += 2;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"[]\"");
            }
          }
          var result13 = result12 !== null
            ? (function() { return { type: 'array' }; })()
            : null;
          if (result13 !== null) {
            var result11 = result13;
          } else {
            var result11 = null;
            pos = savedPos2;
          }
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "[") {
              var result4 = "[";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"[\"");
              }
            }
            if (result4 !== null) {
              var result5 = [];
              var result10 = parse_sp();
              while (result10 !== null) {
                result5.push(result10);
                var result10 = parse_sp();
              }
              if (result5 !== null) {
                var result6 = parse_integer();
                if (result6 !== null) {
                  var result7 = [];
                  var result9 = parse_sp();
                  while (result9 !== null) {
                    result7.push(result9);
                    var result9 = parse_sp();
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "]") {
                      var result8 = "]";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result8 !== null) {
                      var result2 = [result4, result5, result6, result7, result8];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(size) { return { type: 'array', size: size }; })(result2[2])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression() {
        var cacheKey = 'expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_decimal();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_string_literal();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos, 6) === "<expr>") {
              var result3 = "<expr>";
              pos += 6;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"<expr>\"");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_function_call();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_symbol();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_call() {
        var cacheKey = 'function_call@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_identifier();
        if (result3 !== null) {
          var result4 = [];
          var result6 = parse_sp();
          while (result6 !== null) {
            result4.push(result6);
            var result6 = parse_sp();
          }
          if (result4 !== null) {
            var result5 = parse_value_list();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, args) {
                  return { type: 'function-call', name: name, args: args.values };
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_value_list() {
        var cacheKey = 'value_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "(") {
          var result14 = "(";
          pos += 1;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result14 !== null) {
          var result15 = [];
          var result17 = parse_sp();
          while (result17 !== null) {
            result15.push(result17);
            var result17 = parse_sp();
          }
          if (result15 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result16 = ")";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result16 !== null) {
              var result12 = [result14, result15, result16];
            } else {
              var result12 = null;
              pos = savedPos3;
            }
          } else {
            var result12 = null;
            pos = savedPos3;
          }
        } else {
          var result12 = null;
          pos = savedPos3;
        }
        var result13 = result12 !== null
          ? (function() { return { type: 'value-list', values: [] }; })()
          : null;
        if (result13 !== null) {
          var result11 = result13;
        } else {
          var result11 = null;
          pos = savedPos2;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result10 = parse_sp();
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_sp();
            }
            if (result5 !== null) {
              var result6 = parse_value_list_noparens();
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_sp();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_sp();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result8 = ")";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result8 !== null) {
                    var result2 = [result4, result5, result6, result7, result8];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(values) {
                    return { type: 'value-list', values: values };
                })(result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_value_list_noparens() {
        var cacheKey = 'value_list_noparens@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_expression();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result6 = [];
          var result11 = parse_sp();
          while (result11 !== null) {
            result6.push(result11);
            var result11 = parse_sp();
          }
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result7 !== null) {
              var result8 = [];
              var result10 = parse_sp();
              while (result10 !== null) {
                result8.push(result10);
                var result10 = parse_sp();
              }
              if (result8 !== null) {
                var result9 = parse_value_list_noparens();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(value, opt) {
                  var more = opt[3];
          
                  if (more !== undefined)
                  {
                      more.unshift(value);
                      return more;
                  }
          
                  return [value];
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_symbol() {
        var cacheKey = 'symbol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_identifier();
        var result2 = result1 !== null
          ? (function(text) { return { type: 'symbol', value: text }; })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[_a-zA-Z]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[_a-zA-Z]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[_a-zA-Z0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[_a-zA-Z0-9]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[_a-zA-Z0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[_a-zA-Z0-9]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(text) { return text[0] + text[1].join(''); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("identifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_decimal() {
        var cacheKey = 'decimal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_real();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_integer();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_character_literal();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("decimal");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_real() {
        var cacheKey = 'real@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos6 = pos;
        var savedPos7 = pos;
        if (input.substr(pos).match(/^[\-+]/) !== null) {
          var result35 = input.charAt(pos);
          pos++;
        } else {
          var result35 = null;
          if (reportMatchFailures) {
            matchFailed("[\\-+]");
          }
        }
        var result29 = result35 !== null ? result35 : '';
        if (result29 !== null) {
          if (input.substr(pos, 1) === "0") {
            var result34 = "0";
            pos += 1;
          } else {
            var result34 = null;
            if (reportMatchFailures) {
              matchFailed("\"0\"");
            }
          }
          var result30 = result34 !== null ? result34 : '';
          if (result30 !== null) {
            if (input.substr(pos, 2) === ".0") {
              var result31 = ".0";
              pos += 2;
            } else {
              var result31 = null;
              if (reportMatchFailures) {
                matchFailed("\".0\"");
              }
            }
            if (result31 !== null) {
              if (input.substr(pos).match(/^[fF]/) !== null) {
                var result33 = input.charAt(pos);
                pos++;
              } else {
                var result33 = null;
                if (reportMatchFailures) {
                  matchFailed("[fF]");
                }
              }
              var result32 = result33 !== null ? result33 : '';
              if (result32 !== null) {
                var result27 = [result29, result30, result31, result32];
              } else {
                var result27 = null;
                pos = savedPos7;
              }
            } else {
              var result27 = null;
              pos = savedPos7;
            }
          } else {
            var result27 = null;
            pos = savedPos7;
          }
        } else {
          var result27 = null;
          pos = savedPos7;
        }
        var result28 = result27 !== null
          ? (function() { return { type: 'double', value: 0.0 }; })()
          : null;
        if (result28 !== null) {
          var result26 = result28;
        } else {
          var result26 = null;
          pos = savedPos6;
        }
        if (result26 !== null) {
          var result0 = result26;
        } else {
          var savedPos3 = pos;
          var savedPos4 = pos;
          var savedPos5 = pos;
          if (input.substr(pos).match(/^[\-+]/) !== null) {
            var result25 = input.charAt(pos);
            pos++;
          } else {
            var result25 = null;
            if (reportMatchFailures) {
              matchFailed("[\\-+]");
            }
          }
          var result18 = result25 !== null ? result25 : '';
          if (result18 !== null) {
            if (input.substr(pos).match(/^[1-9]/) !== null) {
              var result19 = input.charAt(pos);
              pos++;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("[1-9]");
              }
            }
            if (result19 !== null) {
              var result20 = [];
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result24 = input.charAt(pos);
                pos++;
              } else {
                var result24 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              while (result24 !== null) {
                result20.push(result24);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result24 = input.charAt(pos);
                  pos++;
                } else {
                  var result24 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
              if (result20 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result21 = ".";
                  pos += 1;
                } else {
                  var result21 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result21 !== null) {
                  var result22 = [];
                  if (input.substr(pos).match(/^[0-9]/) !== null) {
                    var result23 = input.charAt(pos);
                    pos++;
                  } else {
                    var result23 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9]");
                    }
                  }
                  while (result23 !== null) {
                    result22.push(result23);
                    if (input.substr(pos).match(/^[0-9]/) !== null) {
                      var result23 = input.charAt(pos);
                      pos++;
                    } else {
                      var result23 = null;
                      if (reportMatchFailures) {
                        matchFailed("[0-9]");
                      }
                    }
                  }
                  if (result22 !== null) {
                    var result15 = [result18, result19, result20, result21, result22];
                  } else {
                    var result15 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result15 = null;
                  pos = savedPos5;
                }
              } else {
                var result15 = null;
                pos = savedPos5;
              }
            } else {
              var result15 = null;
              pos = savedPos5;
            }
          } else {
            var result15 = null;
            pos = savedPos5;
          }
          if (result15 !== null) {
            if (input.substr(pos).match(/^[fF]/) !== null) {
              var result17 = input.charAt(pos);
              pos++;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("[fF]");
              }
            }
            var result16 = result17 !== null ? result17 : '';
            if (result16 !== null) {
              var result13 = [result15, result16];
            } else {
              var result13 = null;
              pos = savedPos4;
            }
          } else {
            var result13 = null;
            pos = savedPos4;
          }
          var result14 = result13 !== null
            ? (function(text) {
                    var value = parseFloat(text[0] + text[1] +
                            text[2].join('') + '.' + text[4].join(''));
            
                    return { type: 'double', value: value };
                })(result13[0])
            : null;
          if (result14 !== null) {
            var result12 = result14;
          } else {
            var result12 = null;
            pos = savedPos3;
          }
          if (result12 !== null) {
            var result0 = result12;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var savedPos2 = pos;
            if (input.substr(pos).match(/^[\-+]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[\\-+]");
              }
            }
            var result7 = result11 !== null ? result11 : '';
            if (result7 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result8 = ".";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result8 !== null) {
                var result9 = [];
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
                while (result10 !== null) {
                  result9.push(result10);
                  if (input.substr(pos).match(/^[0-9]/) !== null) {
                    var result10 = input.charAt(pos);
                    pos++;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9]");
                    }
                  }
                }
                if (result9 !== null) {
                  var result4 = [result7, result8, result9];
                } else {
                  var result4 = null;
                  pos = savedPos2;
                }
              } else {
                var result4 = null;
                pos = savedPos2;
              }
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              if (input.substr(pos).match(/^[fF]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[fF]");
                }
              }
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result2 = [result4, result5];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(text) {
                      var value = parseFloat(text[0] + '0.' + text[2].join(''));
                      return { type: 'double', value: value };
                  })(result2[0])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("real");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos6 = pos;
        var savedPos7 = pos;
        if (input.substr(pos).match(/^[\-+]/) !== null) {
          var result26 = input.charAt(pos);
          pos++;
        } else {
          var result26 = null;
          if (reportMatchFailures) {
            matchFailed("[\\-+]");
          }
        }
        var result24 = result26 !== null ? result26 : '';
        if (result24 !== null) {
          if (input.substr(pos, 1) === "0") {
            var result25 = "0";
            pos += 1;
          } else {
            var result25 = null;
            if (reportMatchFailures) {
              matchFailed("\"0\"");
            }
          }
          if (result25 !== null) {
            var result22 = [result24, result25];
          } else {
            var result22 = null;
            pos = savedPos7;
          }
        } else {
          var result22 = null;
          pos = savedPos7;
        }
        var result23 = result22 !== null
          ? (function() { return { type: 'int', value: 0 }; })()
          : null;
        if (result23 !== null) {
          var result21 = result23;
        } else {
          var result21 = null;
          pos = savedPos6;
        }
        if (result21 !== null) {
          var result0 = result21;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          if (input.substr(pos).match(/^[\-+]/) !== null) {
            var result20 = input.charAt(pos);
            pos++;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("[\\-+]");
            }
          }
          var result16 = result20 !== null ? result20 : '';
          if (result16 !== null) {
            if (input.substr(pos).match(/^[1-9]/) !== null) {
              var result17 = input.charAt(pos);
              pos++;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("[1-9]");
              }
            }
            if (result17 !== null) {
              var result18 = [];
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result19 = input.charAt(pos);
                pos++;
              } else {
                var result19 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              while (result19 !== null) {
                result18.push(result19);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result19 = input.charAt(pos);
                  pos++;
                } else {
                  var result19 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
              if (result18 !== null) {
                var result14 = [result16, result17, result18];
              } else {
                var result14 = null;
                pos = savedPos5;
              }
            } else {
              var result14 = null;
              pos = savedPos5;
            }
          } else {
            var result14 = null;
            pos = savedPos5;
          }
          var result15 = result14 !== null
            ? (function(text) {
                    var value = parseInt(text[0] + text[1] + text[2].join(''));
                    return { type: 'int', value: value };
                })(result14)
            : null;
          if (result15 !== null) {
            var result13 = result15;
          } else {
            var result13 = null;
            pos = savedPos4;
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 2) === "0x") {
              var result10 = "0x";
              pos += 2;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"0x\"");
              }
            }
            if (result10 !== null) {
              if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
                var result12 = input.charAt(pos);
                pos++;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9a-fA-F]");
                }
              }
              if (result12 !== null) {
                var result11 = [];
                while (result12 !== null) {
                  result11.push(result12);
                  if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
                    var result12 = input.charAt(pos);
                    pos++;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9a-fA-F]");
                    }
                  }
                }
              } else {
                var result11 = null;
              }
              if (result11 !== null) {
                var result8 = [result10, result11];
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
            var result9 = result8 !== null
              ? (function(text) {
                      var value = parseInt(text.join(''), 16);
                      return { type: 'int', value: value };
                  })(result8[1])
              : null;
            if (result9 !== null) {
              var result7 = result9;
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "0") {
                var result4 = "0";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"0\"");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[0-7]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-7]");
                  }
                }
                if (result6 !== null) {
                  var result5 = [];
                  while (result6 !== null) {
                    result5.push(result6);
                    if (input.substr(pos).match(/^[0-7]/) !== null) {
                      var result6 = input.charAt(pos);
                      pos++;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("[0-7]");
                      }
                    }
                  }
                } else {
                  var result5 = null;
                }
                if (result5 !== null) {
                  var result2 = [result4, result5];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(text) {
                        var value = parseInt(text.join(''), 8);
                        return { type: 'int', value: value };
                    })(result2[1])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("integer");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string_literal() {
        var cacheKey = 'string_literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result6 = parse_strchar();
          while (result6 !== null) {
            result4.push(result6);
            var result6 = parse_strchar();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(text) { return { type: 'string-literal', value: text.join('') }; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("string literal");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_character_literal() {
        var cacheKey = 'character_literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "'") {
          var result3 = "'";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_strchar();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result5 = "'";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(text) {
                  return { type: 'int8', value: text.charCodeAt(0) };
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("character literal");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_strchar() {
        var cacheKey = 'strchar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ a-zA-Z0-9'!@#$%&*()\-+=_\/[\]{}^~,.:;?|]/) !== null) {
          var result35 = input.charAt(pos);
          pos++;
        } else {
          var result35 = null;
          if (reportMatchFailures) {
            matchFailed("[ a-zA-Z0-9'!@#$%&*()\\-+=_\\/[\\]{}^~,.:;?|]");
          }
        }
        if (result35 !== null) {
          var result0 = result35;
        } else {
          var savedPos11 = pos;
          if (input.substr(pos, 2) === "\\r") {
            var result33 = "\\r";
            pos += 2;
          } else {
            var result33 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\r\"");
            }
          }
          var result34 = result33 !== null
            ? (function() { return '\r'; })()
            : null;
          if (result34 !== null) {
            var result32 = result34;
          } else {
            var result32 = null;
            pos = savedPos11;
          }
          if (result32 !== null) {
            var result0 = result32;
          } else {
            var savedPos10 = pos;
            if (input.substr(pos, 2) === "\\n") {
              var result30 = "\\n";
              pos += 2;
            } else {
              var result30 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\\n\"");
              }
            }
            var result31 = result30 !== null
              ? (function() { return '\n'; })()
              : null;
            if (result31 !== null) {
              var result29 = result31;
            } else {
              var result29 = null;
              pos = savedPos10;
            }
            if (result29 !== null) {
              var result0 = result29;
            } else {
              var savedPos9 = pos;
              if (input.substr(pos, 2) === "\\t") {
                var result27 = "\\t";
                pos += 2;
              } else {
                var result27 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\\\t\"");
                }
              }
              var result28 = result27 !== null
                ? (function() { return '\t'; })()
                : null;
              if (result28 !== null) {
                var result26 = result28;
              } else {
                var result26 = null;
                pos = savedPos9;
              }
              if (result26 !== null) {
                var result0 = result26;
              } else {
                var savedPos6 = pos;
                var savedPos7 = pos;
                if (input.substr(pos, 2) === "\\x") {
                  var result22 = "\\x";
                  pos += 2;
                } else {
                  var result22 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\\\x\"");
                  }
                }
                if (result22 !== null) {
                  var savedPos8 = pos;
                  if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
                    var result24 = input.charAt(pos);
                    pos++;
                  } else {
                    var result24 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9a-fA-F]");
                    }
                  }
                  if (result24 !== null) {
                    if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
                      var result25 = input.charAt(pos);
                      pos++;
                    } else {
                      var result25 = null;
                      if (reportMatchFailures) {
                        matchFailed("[0-9a-fA-F]");
                      }
                    }
                    if (result25 !== null) {
                      var result23 = [result24, result25];
                    } else {
                      var result23 = null;
                      pos = savedPos8;
                    }
                  } else {
                    var result23 = null;
                    pos = savedPos8;
                  }
                  if (result23 !== null) {
                    var result20 = [result22, result23];
                  } else {
                    var result20 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result20 = null;
                  pos = savedPos7;
                }
                var result21 = result20 !== null
                  ? (function(text) { return String.fromCharCode(parseInt(text[0] + text[1], 16)); })(result20[1])
                  : null;
                if (result21 !== null) {
                  var result19 = result21;
                } else {
                  var result19 = null;
                  pos = savedPos6;
                }
                if (result19 !== null) {
                  var result0 = result19;
                } else {
                  var savedPos3 = pos;
                  var savedPos4 = pos;
                  if (input.substr(pos, 2) === "\\u") {
                    var result13 = "\\u";
                    pos += 2;
                  } else {
                    var result13 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"\\\\u\"");
                    }
                  }
                  if (result13 !== null) {
                    var savedPos5 = pos;
                    if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
                      var result15 = input.charAt(pos);
                      pos++;
                    } else {
                      var result15 = null;
                      if (reportMatchFailures) {
                        matchFailed("[0-9a-fA-F]");
                      }
                    }
                    if (result15 !== null) {
                      if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
                        var result16 = input.charAt(pos);
                        pos++;
                      } else {
                        var result16 = null;
                        if (reportMatchFailures) {
                          matchFailed("[0-9a-fA-F]");
                        }
                      }
                      if (result16 !== null) {
                        if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
                          var result17 = input.charAt(pos);
                          pos++;
                        } else {
                          var result17 = null;
                          if (reportMatchFailures) {
                            matchFailed("[0-9a-fA-F]");
                          }
                        }
                        if (result17 !== null) {
                          if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
                            var result18 = input.charAt(pos);
                            pos++;
                          } else {
                            var result18 = null;
                            if (reportMatchFailures) {
                              matchFailed("[0-9a-fA-F]");
                            }
                          }
                          if (result18 !== null) {
                            var result14 = [result15, result16, result17, result18];
                          } else {
                            var result14 = null;
                            pos = savedPos5;
                          }
                        } else {
                          var result14 = null;
                          pos = savedPos5;
                        }
                      } else {
                        var result14 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result14 = null;
                      pos = savedPos5;
                    }
                    if (result14 !== null) {
                      var result11 = [result13, result14];
                    } else {
                      var result11 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result11 = null;
                    pos = savedPos4;
                  }
                  var result12 = result11 !== null
                    ? (function(text) {
                            return String.fromCharCode(parseInt(text[0] + text[1] +
                                    text[2] + text[3], 16));
                        })(result11[1])
                    : null;
                  if (result12 !== null) {
                    var result10 = result12;
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                  if (result10 !== null) {
                    var result0 = result10;
                  } else {
                    var savedPos2 = pos;
                    if (input.substr(pos, 2) === "\\\"") {
                      var result8 = "\\\"";
                      pos += 2;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"\\\\\\\"\"");
                      }
                    }
                    var result9 = result8 !== null
                      ? (function() { return '"'; })()
                      : null;
                    if (result9 !== null) {
                      var result7 = result9;
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                    if (result7 !== null) {
                      var result0 = result7;
                    } else {
                      var savedPos1 = pos;
                      if (input.substr(pos, 2) === "\\'") {
                        var result5 = "\\'";
                        pos += 2;
                      } else {
                        var result5 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"\\\\'\"");
                        }
                      }
                      var result6 = result5 !== null
                        ? (function() { return "'"; })()
                        : null;
                      if (result6 !== null) {
                        var result4 = result6;
                      } else {
                        var result4 = null;
                        pos = savedPos1;
                      }
                      if (result4 !== null) {
                        var result0 = result4;
                      } else {
                        var savedPos0 = pos;
                        if (input.substr(pos, 2) === "\\\\") {
                          var result2 = "\\\\";
                          pos += 2;
                        } else {
                          var result2 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"\\\\\\\\\"");
                          }
                        }
                        var result3 = result2 !== null
                          ? (function() { return '\\'; })()
                          : null;
                        if (result3 !== null) {
                          var result1 = result3;
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                        if (result1 !== null) {
                          var result0 = result1;
                        } else {
                          var result0 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sp() {
        var cacheKey = 'sp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[ \r\n	]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ \\r\\n	]");
          }
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("space");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();